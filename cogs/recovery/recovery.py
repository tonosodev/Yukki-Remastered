import asyncio
import os

import discord
from discord.ext import commands
from config import commands_permission, bot_initialize, bot_settings


class RecoveryCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    @commands.has_any_role(*commands_permission['recovery_command_permission'])
    async def recovery(self, ctx):
        system_log = self.bot.get_channel(bot_settings['system_log_channel'])

        await ctx.message.delete()

        member = discord.Member = "641398600727003197"
        embed_recovery = discord.Embed(title=f"{self.bot.user.name} | Control Panel")
        embed_recovery.set_thumbnail(url=ctx.author.avatar_url)

        embed_recovery.add_field(name='WARNING:',
                                 value="Make sure you are going to make the right choice of action before use.\n"
                                       "**Attention!**\n"
                                       "*protocol: Self-Destruction was created in case of 'hopelessness'.* \n"
                                       "*Don't forget - this will destroy the entire project...*",
                                 inline=False)
        embed_recovery.add_field(name='Select action:', value=f'‚≠ï __**Reload**__\n'
                                                              f'‚ùå __**Shutdown**__\n'
                                                              f'========================\n'
                                                              f'‚ô¶ __**Recovery**__\n'
                                                              f'========================\n'
                                                              f'üí• __**protocol: Self-Destruction**__', inline=False)
        embed_recovery.set_footer(text=f'{self.bot.user.name}' + bot_initialize['embeds_footer_message'],
                                  icon_url=self.bot.user.avatar_url)
        msg = await ctx.send(embed=embed_recovery)
        await msg.add_reaction("‚≠ï")
        await msg.add_reaction("‚ùå")
        await msg.add_reaction("‚ô¶")
        await msg.add_reaction("üí•")

        def reload_reaction(reaction, user):
            return user == ctx.message.author and str(reaction.emoji) == '‚≠ï'

        try:
            await self.bot.wait_for('reaction_add', timeout=60.0, check=reload_reaction)
        except asyncio.TimeoutError:
            await msg.clear_reactions()
        else:
            embed_reload = discord.Embed(title=f"{self.bot.user.name} | Control Panel")
            embed_reload.set_thumbnail(url=ctx.author.avatar_url)
            embed_reload.add_field(name="‚≠ï __**Reload**__", value=f"{ctx.author.mention}, –Ω–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫. . .")
            embed_reload.set_footer(text=f'{self.bot.user.name}' + bot_initialize['embeds_footer_message'],
                                    icon_url=self.bot.user.avatar_url)

            embed_reload_complete = discord.Embed(title=f"{self.bot.user.name} | Control Panel")
            embed_reload_complete.set_thumbnail(url=ctx.author.avatar_url)
            embed_reload_complete.add_field(name="‚≠ï __**Reload**__",
                                            value=f"{ctx.author.mention}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!", inline=False)
            embed_reload_complete.add_field(name="__**–°–æ–≤–µ—Ç**__:", value="–¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ¬´–ñ—É—Ä–Ω–∞–ª –°–∏—Å—Ç–µ–º—ã¬ª.",
                                            inline=False)
            embed_reload_complete.set_footer(text=f'{self.bot.user.name}' + bot_initialize['embeds_footer_message'],
                                             icon_url=self.bot.user.avatar_url)

            await msg.edit(embed=embed_reload)
            await msg.clear_reactions()
            embed = discord.Embed(
                title="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫. . .",
                color=0x808080,
                timestamp=ctx.message.created_at
            )
            for filename in os.listdir("./cogs/administration_commands"):
                if filename.endswith(".py") and not filename.startswith("_"):
                    try:

                        self.bot.unload_extension(f'cogs.administration_commands.{filename[:-3]}')
                        self.bot.load_extension(f'cogs.administration_commands.{filename[:-3]}')
                        embed.add_field(
                            name=f"[administration_commands] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:",
                            value=f'`{filename}`',
                            inline=False
                        )
                    except Exception as e:
                        embed.add_field(
                            name=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: `{filename}`",
                            value=str(e),
                            inline=False
                        )
                    await asyncio.sleep(0.5)

            for filename in os.listdir("./cogs/commands"):
                if filename.endswith(".py") and not filename.startswith("_"):
                    try:
                        self.bot.unload_extension(f"cogs.commands.{filename[:-3]}")
                        self.bot.load_extension(f"cogs.commands.{filename[:-3]}")
                        embed.add_field(
                            name=f"[commands] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:",
                            value=f'`{filename}`',
                            inline=False
                        )
                    except Exception as e:
                        embed.add_field(
                            name=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: `{filename}`",
                            value=str(e),
                            inline=False
                        )
                    await asyncio.sleep(0.5)

            for filename in os.listdir("./cogs/events"):
                if filename.endswith(".py") and not filename.startswith("_"):
                    try:
                        self.bot.unload_extension(f'cogs.events.{filename[:-3]}')
                        self.bot.load_extension(f'cogs.events.{filename[:-3]}')
                        embed.add_field(
                            name=f"[events] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:",
                            value=f'`{filename}`',
                            inline=False
                        )
                    except Exception as e:
                        embed.add_field(
                            name=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: `{filename}`",
                            value=str(e),
                            inline=False
                        )
                    await asyncio.sleep(0.5)

            for filename in os.listdir("./cogs/economy"):
                if filename.endswith(".py") and not filename.startswith("_"):
                    try:
                        self.bot.unload_extension(f'cogs.economy.{filename[:-3]}')
                        self.bot.load_extension(f'cogs.economy.{filename[:-3]}')
                        embed.add_field(
                            name=f"[economy] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:",
                            value=f'`{filename}`',
                            inline=False
                        )
                    except Exception as e:
                        embed.add_field(
                            name=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: `{filename}`",
                            value=str(e),
                            inline=False
                        )
                    await asyncio.sleep(0.5)

            for filename in os.listdir("./cogs/development"):
                if filename.endswith(".py") and not filename.startswith("_"):
                    try:
                        self.bot.unload_extension(f'cogs.development.{filename[:-3]}')
                        self.bot.load_extension(f'cogs.development.{filename[:-3]}')
                        embed.add_field(
                            name=f"[development] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:",
                            value=f'`{filename}`',
                            inline=False
                        )
                    except Exception as e:
                        embed.add_field(
                            name=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: `{filename}`",
                            value=str(e),
                            inline=False
                        )
                    await asyncio.sleep(0.5)

            for filename in os.listdir("./cogs/phrases"):
                if filename.endswith(".py") and not filename.startswith("_"):
                    try:
                        self.bot.unload_extension(f'cogs.phrases.{filename[:-3]}')
                        self.bot.load_extension(f'cogs.phrases.{filename[:-3]}')
                        embed.add_field(
                            name=f"[phrases] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:",
                            value=f'`{filename}`',
                            inline=False
                        )
                    except Exception as e:
                        embed.add_field(
                            name=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: `{filename}`",
                            value=str(e),
                            inline=False
                        )
                    await asyncio.sleep(0.5)

            for filename in os.listdir("./cogs/recovery"):
                if filename.endswith(".py") and not filename.startswith("_"):
                    try:
                        self.bot.unload_extension(f'cogs.recovery.{filename[:-3]}')
                        self.bot.load_extension(f'cogs.recovery.{filename[:-3]}')
                        embed.add_field(
                            name=f"[recovery] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:",
                            value=f'`{filename}`',
                            inline=False
                        )
                    except Exception as e:
                        embed.add_field(
                            name=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: `{filename}`",
                            value=str(e),
                            inline=False
                        )
                    await asyncio.sleep(0.5)
        await msg.edit(embed=embed_reload_complete, delete_after=15)
        print("\n[RECOVERY] System has been reloaded!\n")
        await system_log.send(embed=embed)

        ############################################################################################################

    """
        def shutdown_reaction(reaction, user):
            return user == ctx.message.author and str(reaction.emoji) == '‚ùå'

        try:
            reaction, user = await self.bot.wait_for('reaction_add', timeout=60.0, check=shutdown_reaction)
        except asyncio.TimeoutError:
            pass
        else:
            await ctx.channel.send(ctx.message.author.mention + ", –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", delete_after=10)
            await msg.delete()

        ############################################################################################################

        def recovery_reaction(reaction, user):
            return user == ctx.message.author and str(reaction.emoji) == '‚ô¶'

        try:
            reaction, user = await self.bot.wait_for('reaction_add', timeout=60.0, check=recovery_reaction)
        except asyncio.TimeoutError:
            pass
        else:
            await ctx.channel.send(ctx.message.author.mention + ", –Ω–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.",
                                   delete_after=10)
            await msg.delete()

        ############################################################################################################

        def protocol_reaction(reaction, user):
            return user == ctx.message.author and str(reaction.emoji) == 'üí•'

        try:
            reaction, user = await self.bot.wait_for('reaction_add', timeout=60.0, check=protocol_reaction)
        except asyncio.TimeoutError:
            pass
        else:
            await ctx.channel.send(
                ctx.message.author.mention + ", —Ç—ã –≤—Å–µ –∂–µ —Ä–µ—à–∏–ª—Å—è?\n–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥–µ–Ω –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.\n–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ, –ø–∞–ø–æ—á–∫–∞...",
                delete_after=10)
        await msg.delete()


#        try:
#            react_user = await self.bot.wait_for('reaction_add',
#                                                 check=lambda reaction, react: reaction.emoji == '‚≠ï')
#            if react_user is member:
#                await ctx.send(ctx.message.author.id)
#                await msg.clear_reactions()
#            else:
#                await ctx.send("`[REACTION EXCEPTION]`\n__**User not verified!**__")
#                await msg.clear_reactions()
#        finally:
#            await ctx.send("`[REACTION ERROR]`\n__**Global error...**__")
#            await msg.clear_reactions()

"""


def setup(bot):
    bot.add_cog(RecoveryCog(bot))
